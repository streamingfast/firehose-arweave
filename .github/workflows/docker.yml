name: Build docker image

on:
  push:
    tags:
      - "v*"
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      thegarii_version:
        description: 'version of thegarii to use (if not specified, will use latest)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-vanilla:
    runs-on: ubuntu-20.04

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        go-version: [1.18.x]

    outputs:
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Set up Go cache
        uses: actions/cache@v3
        id: cache-go
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Print branch name
        id: extract_branch
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "##[set-output name=release_train;]$(echo ${GITHUB_REF#refs/heads/release/})"

      - name: Build
        run: go build -v -ldflags "-X main.version=${{ github.event.ref }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%MZ)" -o ./firearweave ./cmd/firearweave

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate docker tags/labels from github build context
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=sha,prefix=,enable=true
            type=raw,enable=${{ github.ref == 'refs/heads/develop' }},value=develop
            type=raw,enable=${{ startsWith(github.ref, 'refs/heads/release/v') }},value=${{ steps.extract_branch.outputs.release_train }}
          flavor: |
            latest=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-bundle:
    needs: build-vanilla
    runs-on: ubuntu-20.04
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}

    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.print.outputs.image }}

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Branch name
        id: extract_branch
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "##[set-output name=release_train;]$(echo ${GITHUB_REF#refs/heads/release/})"

      - name: Set default thegarii version
        if: ${{ github.event.inputs.thegarii_version == '' }}
        id: thegarii_version_default
        run: |
          echo THEGARII_VERSION=latest >> $GITHUB_ENV

      - name: Set thegarii version from input
        if: ${{ github.event.inputs.thegarii_version != '' }}
        id: thegarii_version_input
        run: |
          echo THEGARII_VERSION=$(echo "${THEGARII_VERSION_INPUT}") >> $GITHUB_ENV
        env:
          THEGARII_VERSION_INPUT: ${{ github.event.inputs.thegarii_version }}

      - name: Set versions
        shell: bash
        run: |
          docker pull ghcr.io/streamingfast/thegarii:${{ env.THEGARII_VERSION }}
          echo VERSION=$(docker inspect --format='{{index .Config.Labels "org.opencontainers.image.version"}}' 'ghcr.io/streamingfast/thegarii':${{ env.THEGARII_VERSION }}) >> $GITHUB_ENV
          echo SF_VERSION=$(echo "${{ needs.build-vanilla.outputs.tags }}" | grep -Ev "(develop)" | head -n 1 |cut -d: -f2) >> $GITHUB_ENV

      - name: Generate docker tags/labels from github build context
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,suffix=-${{ env.VERSION }}
            type=sha,prefix=,suffix=-${{ env.VERSION }},enable=true
            type=raw,prefix=,suffix=-${{ env.VERSION }},enable=${{ github.ref == 'refs/heads/develop' }},value=develop
            type=raw,prefix=,suffix=-${{ env.VERSION }},enable=${{ startsWith(github.ref, 'refs/heads/release/v') }},value=${{ steps.extract_branch.outputs.release_train }}
          flavor: latest=false

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./Dockerfile.bundle
          build-args: |
            THEGARII_VERSION=${{ env.THEGARII_VERSION }}
            SF_VERSION=${{ env.SF_VERSION }}

      - id: print
        run: |
          OUT="${{ steps.meta.outputs.tags }}"
          OUT="${OUT//'%'/'%25'}"
          OUT="${OUT//$'\n'/'%0A'}"
          OUT="${OUT//$'\r'/'%0D'}"
          echo "::set-output name=image::$OUT"

  slack-notifications-vanilla:
    if: ${{ !startsWith(github.ref, 'refs/tags/') && github.event_name != 'workflow_dispatch' }}
    needs: [build-vanilla]
    runs-on: ubuntu-20.04
    steps:
      - name: Slack notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        uses: Ilshidur/action-slack@2.0.2
        with:
          args: |
            :done: *${{ github.repository }}* Success building docker image from ${{ github.ref_type }} _${{ github.ref_name }}_ (${{ github.actor }}) :sparkling_heart: ```${{ join(needs.build-vanilla.outputs.tags, ' ') }}```

  slack-notifications:
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [build-vanilla, build-bundle]
    runs-on: ubuntu-20.04
    steps:
      - name: Slack notification
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        uses: Ilshidur/action-slack@2.0.2
        with:
          args: |
            :done: *${{ github.repository }}* Success building docker images from ${{ github.ref_type }} _${{ github.ref_name }}_ (${{ github.actor }}) :sparkling_heart: ```${{ join(needs.build-vanilla.outputs.tags, ' ') }}
            ${{ needs.build-bundle.outputs.image }}```
